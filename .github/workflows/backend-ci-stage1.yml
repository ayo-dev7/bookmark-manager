name: Backend CI - Stage 1 (Basic)

on:
    push:
        branches: [main,dev]
        paths:
            - 'backend/**'
            - '.github/workflows/backend-ci-stage1.yml'
    pull_request:
        branches: [main,dev]
        paths:
            - 'backend/**'
            - '.github/workflows/backend-ci-stage1.yml'

defaults:
    run:
        working-directory: ./backend

env:
    PYTHON_VERSION: '3.11'

jobs:
    basic-checks:
        name: Basic Code Quality
        runs-on: ubuntu-latest

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Set up Python
              uses: actions/setup-python@v4
              with:
                python-version: ${{env.PYTHON_VERSION}}
                cache: 'pip'
            
            - name: Install dependencies
              run: |
                python -m pip install --upgrade pip
                pip install -r requirements.txt
                pip install black flake8 pytest pytest-asyncio httpx

            - name: Code formatting check
              run: |
                echo "Checking code formatting with Black...."
                black --check --diff app/ || echo "Code formatting issues found"
            
            - name: Basic linting
              run: |
                echo "Running basic linting with flake8..."
                flake8 app/ --count --statistics || echo "Linting issues found"

            - name: Run basic tests
              env:
                DATABASE_URL: sqlite:/// ./test.db
                JWT_SECRET_KEY: test-secret-key-for-stage1-ci
                ENVIRONMENT: testing
              run: |
                echo "Running basic health check tests..."
                pytest tests/test_main.py
    
    docker-build:
        name: Docker Build test
        runs-on: ubuntu-latest
        needs: basic-checks

        steps:
            - name: Checkout code
              uses: actions.checkout@v4

            - name: Build Docker Image
              run: |
                echo "Building docker image..."
                docker build -t bookmark-manager-backend:stage1 ./backend

            - name: Test Docker container
              run: |
                echo "Testing Docker container..."
                docker run --rm -d --name test-container \
                    -e DATABASE_URL=sqlite:///test.db \
                    -e JWT_SECRET_KEY=test-secret \
                    -e ENVIRONMENT=testing \
                    -p 8000:8000 \
                    bookmark-manager-backend:stage1

                # Wait for container to start
                sleep 10

                # Test health endpoint
                echo "Testing health endpoint...."
                curl -f http://localhost:8000/health || exit 1

                echo "Docker container test passed!"

                # Stop container
                docker stop test-container

    summary:
        name: Stage 1 summary
        runs-on: ubuntu-latest
        needs: [basic-checks,docker-build]
        if: always()

        steps:
            - name: Print Summary
              run: |
                echo "Stage 1 CI Summary"
                echo "=================="
                echo "Basic code formatting: ${{needs.basic-checks.result}}"
                echo "Docker build and test: ${{needs.docker-build.result}}"
                echo ""
                if ["${{needs.basic-checks.result}}" = "success"] && ["${{needs.docker-build.result}}" == "success"]; then
                    echo "Stage 1 CI passed! Ready for Stage 2."
                else
                    echo "Stage 1 CI failed. Please fix issues before proceeding"
                fi
            
